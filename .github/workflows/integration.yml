name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: 'false'

env:
  GO_VERSION: '1.25'
  NODE_VERSION: '24'
  GOPCA_TEST_MODE: '1'
  GOPCA_TEST_TIMEOUT: '120'

jobs:
  integration-tests:
    name: Integration Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: darwin
          - os: windows-latest
            platform: windows
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better test coverage

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            cmd/gopca-desktop/frontend/package-lock.json
            cmd/gocsv/frontend/package-lock.json
            packages/ui-components/package-lock.json

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Build CLI tool
        run: |
          make build
        env:
          CGO_ENABLED: 1

      - name: Run unit tests
        run: |
          go test -v -race -cover ./internal/... ./pkg/...
        env:
          GOPCA_DEBUG: ${{ github.event.inputs.debug_enabled }}

      - name: Run E2E tests
        run: |
          go test -v -run TestE2E ./internal/integration/...
        timeout-minutes: 10

      - name: Run parity tests
        run: |
          go test -v -run TestParity ./internal/integration/...
        timeout-minutes: 10

      - name: Run regression tests
        run: |
          go test -v -run TestRegression ./internal/integration/...
        timeout-minutes: 15

      - name: Run platform-specific tests
        run: |
          ./scripts/ci/test-platforms.sh
        shell: bash
        timeout-minutes: 10

      - name: Run performance tests
        if: matrix.platform != 'windows'  # Skip on Windows due to timeout issues
        run: |
          go test -v -run TestPerformanceRegression ./internal/integration/...
        timeout-minutes: 10

      - name: Generate coverage report
        if: matrix.platform == 'linux'
        run: |
          go test -coverprofile=coverage.out ./internal/integration/...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.platform }}
          path: |
            /tmp/test_*.log
            /tmp/gopca_test_*
          retention-days: 7

  cross-app-integration:
    name: Cross-Application Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          go mod download

      - name: Build applications
        run: |
          make build
          # Skip csv-build as it requires wails which is not installed in CI
          # The CLI integration is the critical part to test

      - name: Test app integration
        run: |
          # TestAppIntegration doesn't exist, run all pkg/integration tests instead
          go test -v ./pkg/integration/...
        timeout-minutes: 10

  memory-leak-detection:
    name: Memory Leak Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run memory leak tests
        run: |
          go test -v -run TestMemoryLeaks ./internal/core/...
        env:
          GOPCA_PROFILE: '1'
        timeout-minutes: 15

      - name: Run stress tests
        run: |
          go test -v -run TestE2ELargeDataset ./internal/integration/...
        timeout-minutes: 20

  benchmark-regression:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run benchmarks
        run: |
          go test -bench=. -benchtime=10s -benchmem ./internal/core/... | tee benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.txt

      - name: Check performance regression
        run: |
          # Parse benchmark results and check against baselines
          go test -v -run TestPerformanceRegression ./internal/integration/...

  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build CLI
        run: make build

      - name: Run security tests
        run: |
          go test -v -run TestSecurityRegression ./internal/integration/...

      - name: Run gosec security scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt json -out gosec-report.json ./... || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: gosec-report.json

  integration-summary:
    name: Integration Test Summary
    needs: [integration-tests, cross-app-integration, memory-leak-detection, benchmark-regression, security-validation]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Integration Test Summary"
          echo "========================"
          echo "Platform Tests: ${{ needs.integration-tests.result }}"
          echo "Cross-App Integration: ${{ needs.cross-app-integration.result }}"
          echo "Memory Leak Detection: ${{ needs.memory-leak-detection.result }}"
          echo "Benchmark Regression: ${{ needs.benchmark-regression.result }}"
          echo "Security Validation: ${{ needs.security-validation.result }}"
          
          # Fail if any job failed
          if [[ "${{ needs.integration-tests.result }}" == "failure" || \
                "${{ needs.cross-app-integration.result }}" == "failure" || \
                "${{ needs.memory-leak-detection.result }}" == "failure" || \
                "${{ needs.benchmark-regression.result }}" == "failure" || \
                "${{ needs.security-validation.result }}" == "failure" ]]; then
            echo "Some integration tests failed!"
            exit 1
          fi
          
          echo "All integration tests passed!"