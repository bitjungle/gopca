name: Build and Test

on:
  push:
    branches: [ '**' ]  # Run tests on all branches
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Continue running other jobs even if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure Git line endings
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          go test -v -cover ./internal/cli ./internal/core ./internal/io ./internal/utils ./pkg/types
        else
          make ci-test
        fi
      shell: bash
      env:
        GOPCA_TEST_TIMEOUT: 10m
    
    - name: Run linter
      run: |
        echo "Checking code formatting..."
        
        # Use gofmt -l to list files that need formatting
        NEED_FORMAT=""
        for dir in internal pkg cmd/gopca-cli; do
          if [ -d "$dir" ]; then
            output=$(gofmt -l "$dir" 2>/dev/null || true)
            if [ -n "$output" ]; then
              NEED_FORMAT="${NEED_FORMAT}${output}\n"
            fi
          fi
        done
        
        if [ -n "$NEED_FORMAT" ]; then
          echo "ERROR: The following files need formatting:"
          echo -e "$NEED_FORMAT"
          echo ""
          echo "Run 'go fmt ./...' locally to fix formatting."
          exit 1
        else
          echo "âœ“ All files are properly formatted"
        fi
        
        echo ""
        echo "Running go vet..."
        go vet ./internal/... ./pkg/...
        
        echo ""
        echo "Checking for inefficient assignments..."
        if command -v ineffassign &> /dev/null; then
          ineffassign ./...
        else
          echo "ineffassign not found, skipping"
        fi
      shell: bash

  build-cli:
    name: Build CLI
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure Git line endings
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Build all platforms
      run: make ci-build-cli
    
    - name: Upload CLI artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gopca-cli-binaries
        path: build/gopca-cli-*
        retention-days: 7

  build-desktop:
    name: Build Desktop App
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      fail-fast: false  # Continue building other platforms even if one fails
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: darwin
          - os: windows-latest
            platform: windows
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure Git line endings
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: cmd/gopca-desktop/frontend/package-lock.json
    
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: ./scripts/ci/install-linux-deps.sh
    
    - name: Install frontend dependencies
      working-directory: cmd/gopca-desktop/frontend
      run: npm ci
    
    - name: Build desktop app
      run: PLATFORM=${{ matrix.platform }} ./scripts/ci/build-desktop.sh
      shell: bash
    
    - name: Upload desktop artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gopca-desktop-${{ matrix.platform }}
        path: |
          cmd/gopca-desktop/build/bin/*
          !cmd/gopca-desktop/build/bin/*.pdb
          !cmd/gopca-desktop/build/bin/*.ilk
        retention-days: 7