name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          go test -v ./internal/... ./pkg/... ./cmd/gopca-cli/...
        else
          make ci-test
        fi
      shell: bash
    
    - name: Run linter
      run: |
        # Run basic Go tools that are guaranteed to work
        echo "Running gofmt..."
        if [ "$RUNNER_OS" == "Windows" ]; then
          # Windows: Check formatting
          GOFMT_FILES=$(gofmt -l .)
          if [ -n "$GOFMT_FILES" ]; then
            echo "Files need formatting:"
            echo "$GOFMT_FILES"
            exit 1
          fi
        else
          test -z "$(gofmt -l . | grep -v cmd/gopca-desktop)" || (echo "Files need formatting" && exit 1)
        fi
        
        echo "Running go vet..."
        go vet ./internal/... ./pkg/... ./cmd/gopca-cli/...
      shell: bash

  build-cli:
    name: Build CLI
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Build all platforms
      run: make ci-build-cli
    
    - name: Upload CLI artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gopca-cli-binaries
        path: build/gopca-cli-*
        retention-days: 7

  build-desktop:
    name: Build Desktop App
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: darwin
          - os: windows-latest
            platform: windows
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: cmd/gopca-desktop/frontend/package-lock.json
    
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: ./scripts/ci/install-linux-deps.sh
    
    - name: Install frontend dependencies
      working-directory: cmd/gopca-desktop/frontend
      run: npm ci
    
    - name: Build desktop app
      run: PLATFORM=${{ matrix.platform }} ./scripts/ci/build-desktop.sh
    
    - name: Upload desktop artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gopca-desktop-${{ matrix.platform }}
        path: |
          cmd/gopca-desktop/build/bin/*
          !cmd/gopca-desktop/build/bin/*.pdb
          !cmd/gopca-desktop/build/bin/*.ilk
        retention-days: 7