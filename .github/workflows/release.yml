name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.24'

permissions:
  contents: write

jobs:
  build-cli-binaries:
    name: Build CLI - ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
            runner: macos-latest
          - goos: darwin
            goarch: arm64
            runner: macos-latest
          - goos: linux
            goarch: amd64
            runner: self-hosted
          - goos: linux
            goarch: arm64
            runner: self-hosted
          - goos: windows
            goarch: amd64
            runner: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ steps.get_version.outputs.version }}
      run: |
        BINARY_NAME="pca-${GOOS}-${GOARCH}"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        # Build with version information
        mkdir -p build
        go build -ldflags="-s -w \
          -X github.com/bitjungle/gopca/internal/version.Version=${VERSION} \
          -X github.com/bitjungle/gopca/internal/version.GitCommit=$(git rev-parse --short HEAD) \
          -X github.com/bitjungle/gopca/internal/version.BuildDate=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")" \
          -o "build/${BINARY_NAME}" \
          cmd/gopca-cli/main.go
        
        echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV
    
    - name: Sign CLI binary (macOS)
      if: matrix.goos == 'darwin'
      env:
        APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
      run: |
        ./scripts/ci/sign-macos-ci.sh "build/${{ env.BINARY_NAME }}"
    
    - name: Notarize CLI binary (macOS)
      if: matrix.goos == 'darwin'
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        ./scripts/ci/notarize-macos-ci.sh "build/${{ env.BINARY_NAME }}"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: pca-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/${{ env.BINARY_NAME }}
        retention-days: 1

  build-desktop:
    name: Build Desktop - ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: darwin
          - os: windows-latest
            platform: windows
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: ./scripts/ci/install-linux-deps.sh
    
    - name: Install all dependencies (monorepo)
      run: |
        npm ci
    
    - name: Build shared UI components
      run: |
        npm run build-ui
    
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build desktop app
      working-directory: cmd/gopca-desktop
      env:
        VERSION: ${{ steps.get_version.outputs.version }}
      shell: bash
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        wails build -platform ${{ matrix.platform }} -ldflags "-s -w \
          -X github.com/bitjungle/gopca/internal/version.Version=${VERSION} \
          -X github.com/bitjungle/gopca/internal/version.GitCommit=$(git rev-parse --short HEAD) \
          -X github.com/bitjungle/gopca/internal/version.BuildDate=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")"
    
    - name: Sign Desktop app (macOS)
      if: matrix.os == 'macos-latest'
      env:
        APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
      run: |
        ./scripts/ci/sign-macos-ci.sh cmd/gopca-desktop/build/bin/GoPCA.app
    
    - name: Notarize Desktop app (macOS)
      if: matrix.os == 'macos-latest'
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        ./scripts/ci/notarize-macos-ci.sh cmd/gopca-desktop/build/bin/GoPCA.app
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gopca-desktop-${{ matrix.os }}
        path: |
          cmd/gopca-desktop/build/bin/GoPCA.app
          cmd/gopca-desktop/build/bin/GoPCA.exe
          cmd/gopca-desktop/build/bin/GoPCA
        retention-days: 1

  build-gocsv:
    name: Build GoCSV - ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: darwin
          - os: windows-latest
            platform: windows
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: ./scripts/ci/install-linux-deps.sh
    
    - name: Install all dependencies (monorepo)
      run: |
        npm ci
    
    - name: Build shared UI components
      run: |
        npm run build-ui
    
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build GoCSV app
      working-directory: cmd/gocsv
      env:
        VERSION: ${{ steps.get_version.outputs.version }}
      shell: bash
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        wails build -platform ${{ matrix.platform }} -ldflags "-s -w \
          -X github.com/bitjungle/gopca/internal/version.Version=${VERSION} \
          -X github.com/bitjungle/gopca/internal/version.GitCommit=$(git rev-parse --short HEAD) \
          -X github.com/bitjungle/gopca/internal/version.BuildDate=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")"
    
    - name: Sign GoCSV app (macOS)
      if: matrix.os == 'macos-latest'
      env:
        APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
      run: |
        ./scripts/ci/sign-macos-ci.sh cmd/gocsv/build/bin/GoCSV.app
    
    - name: Notarize GoCSV app (macOS)
      if: matrix.os == 'macos-latest'
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        ./scripts/ci/notarize-macos-ci.sh cmd/gocsv/build/bin/GoCSV.app
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocsv-${{ matrix.os }}
        path: |
          cmd/gocsv/build/bin/GoCSV.app
          cmd/gocsv/build/bin/GoCSV.exe
          cmd/gocsv/build/bin/GoCSV
        retention-days: 1

  create-release:
    name: Create Release with Artifacts
    runs-on: ubuntu-latest
    needs: [build-cli-binaries, build-desktop, build-gocsv]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Organize and package artifacts
      run: |
        cd artifacts
        
        # CLI binaries - just move them to the root
        mv pca-*/* .
        
        # Desktop apps - create proper packages
        if [ -d "gopca-desktop-macos-latest" ]; then
          cd gopca-desktop-macos-latest
          zip -r ../GoPCA-macos.zip GoPCA.app
          cd ..
        fi
        
        if [ -f "gopca-desktop-windows-latest/GoPCA.exe" ]; then
          mv gopca-desktop-windows-latest/GoPCA.exe GoPCA-windows.exe
        fi
        
        if [ -f "gopca-desktop-ubuntu-latest/GoPCA" ]; then
          mv gopca-desktop-ubuntu-latest/GoPCA GoPCA-linux
        fi
        
        # GoCSV apps - create proper packages
        if [ -d "gocsv-macos-latest" ]; then
          cd gocsv-macos-latest
          zip -r ../GoCSV-macos.zip GoCSV.app
          cd ..
        fi
        
        if [ -f "gocsv-windows-latest/GoCSV.exe" ]; then
          mv gocsv-windows-latest/GoCSV.exe GoCSV-windows.exe
        fi
        
        if [ -f "gocsv-ubuntu-latest/GoCSV" ]; then
          mv gocsv-ubuntu-latest/GoCSV GoCSV-linux
        fi
        
        # Remove empty directories
        rm -rf pca-* gopca-desktop-* gocsv-*
        
        # Generate checksums
        shasum -a 256 pca-* GoPCA* GoCSV* > checksums.txt
        
        # List all artifacts for debugging
        echo "Final artifacts:"
        ls -la
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/pca-*
          artifacts/GoPCA-*.zip
          artifacts/GoPCA-*.exe
          artifacts/GoPCA-linux
          artifacts/GoCSV-*.zip
          artifacts/GoCSV-*.exe
          artifacts/GoCSV-linux
          artifacts/checksums.txt
        generate_release_notes: true
        fail_on_unmatched_files: false
        body: |
          ## Downloads
          
          ### CLI Binaries
          - **macOS Intel**: `pca-darwin-amd64`
          - **macOS Apple Silicon**: `pca-darwin-arm64`
          - **Linux x64**: `pca-linux-amd64`
          - **Linux ARM64**: `pca-linux-arm64`
          - **Windows x64**: `pca-windows-amd64.exe`
          
          ### Desktop Applications
          - **macOS**: `GoPCA-macos.zip` (signed & notarized)
          - **Windows**: `GoPCA-windows.exe`
          - **Linux**: `GoPCA-linux`
          
          ### GoCSV Editor
          - **macOS**: `GoCSV-macos.zip` (signed & notarized)
          - **Windows**: `GoCSV-windows.exe`
          - **Linux**: `GoCSV-linux`
          
          ### Verification
          SHA-256 checksums for all artifacts: `checksums.txt`
          
          ---