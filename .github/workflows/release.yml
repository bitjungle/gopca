name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual testing
    inputs:
      test_version:
        description: 'Test version for installer (e.g., v0.9.5-test)'
        required: false
        default: 'v0.9.5-test'
        type: string

env:
  GO_VERSION: '1.24'

permissions:
  contents: write

jobs:
  build-cli-binaries:
    name: Build pca CLI - ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
            runner: macos-latest
          - goos: darwin
            goarch: arm64
            runner: macos-latest
          - goos: linux
            goarch: amd64
            runner: self-hosted
          - goos: linux
            goarch: arm64
            runner: self-hosted
          - goos: windows
            goarch: amd64
            runner: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.test_version }}"
          echo "Using test version: $VERSION"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "Using tag version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ steps.get_version.outputs.version }}
      run: |
        BINARY_NAME="pca-${GOOS}-${GOARCH}"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        # Build with version information
        mkdir -p build
        go build -ldflags="-s -w \
          -X github.com/bitjungle/gopca/internal/version.Version=${VERSION} \
          -X github.com/bitjungle/gopca/internal/version.GitCommit=$(git rev-parse --short HEAD) \
          -X github.com/bitjungle/gopca/internal/version.BuildDate=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")" \
          -o "build/${BINARY_NAME}" \
          cmd/gopca-cli/main.go
        
        echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV
    
    - name: Sign pca CLI binary (macOS)
      if: matrix.goos == 'darwin'
      env:
        APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
      run: |
        ./scripts/ci/sign-macos-ci.sh "build/${{ env.BINARY_NAME }}"
    
    - name: Notarize pca CLI binary (macOS)
      if: matrix.goos == 'darwin'
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        ./scripts/ci/notarize-macos-ci.sh "build/${{ env.BINARY_NAME }}"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: pca-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/${{ env.BINARY_NAME }}
        retention-days: 1

  build-desktop:
    name: Build GoPCA Desktop - ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: darwin
          - os: windows-latest
            platform: windows
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: ./scripts/ci/install-linux-deps.sh
    
    - name: Install all dependencies (monorepo)
      run: |
        npm ci
    
    - name: Build shared UI components
      run: |
        npm run build-ui
    
    - name: Get version from tag or input
      id: get_version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.test_version }}"
          echo "Using test version: $VERSION"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "Using tag version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Build GoPCA Desktop
      working-directory: cmd/gopca-desktop
      env:
        VERSION: ${{ steps.get_version.outputs.version }}
      shell: bash
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        wails build -platform ${{ matrix.platform }} -ldflags "-s -w \
          -X github.com/bitjungle/gopca/internal/version.Version=${VERSION} \
          -X github.com/bitjungle/gopca/internal/version.GitCommit=$(git rev-parse --short HEAD) \
          -X github.com/bitjungle/gopca/internal/version.BuildDate=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")"
    
    - name: Sign GoPCA Desktop (macOS)
      if: matrix.os == 'macos-latest'
      env:
        APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
      run: |
        ./scripts/ci/sign-macos-ci.sh cmd/gopca-desktop/build/bin/GoPCA.app
    
    - name: Notarize GoPCA Desktop (macOS)
      if: matrix.os == 'macos-latest'
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        ./scripts/ci/notarize-macos-ci.sh cmd/gopca-desktop/build/bin/GoPCA.app
    
    - name: Package macOS app for artifact upload
      if: matrix.os == 'macos-latest'
      run: |
        cd cmd/gopca-desktop/build/bin
        # Use tar to preserve symlinks and attributes
        tar -czf GoPCA.app.tar.gz GoPCA.app
        cd -
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gopca-desktop-${{ matrix.os }}
        path: |
          cmd/gopca-desktop/build/bin/GoPCA.app.tar.gz
          cmd/gopca-desktop/build/bin/GoPCA.exe
          cmd/gopca-desktop/build/bin/GoPCA
        retention-days: 1

  build-gocsv:
    name: Build GoCSV Desktop - ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: darwin
          - os: windows-latest
            platform: windows
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: ./scripts/ci/install-linux-deps.sh
    
    - name: Install all dependencies (monorepo)
      run: |
        npm ci
    
    - name: Build shared UI components
      run: |
        npm run build-ui
    
    - name: Get version from tag or input
      id: get_version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.test_version }}"
          echo "Using test version: $VERSION"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "Using tag version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Build GoCSV Desktop
      working-directory: cmd/gocsv
      env:
        VERSION: ${{ steps.get_version.outputs.version }}
      shell: bash
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        wails build -platform ${{ matrix.platform }} -ldflags "-s -w \
          -X github.com/bitjungle/gopca/internal/version.Version=${VERSION} \
          -X github.com/bitjungle/gopca/internal/version.GitCommit=$(git rev-parse --short HEAD) \
          -X github.com/bitjungle/gopca/internal/version.BuildDate=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")"
    
    - name: Sign GoCSV Desktop (macOS)
      if: matrix.os == 'macos-latest'
      env:
        APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
      run: |
        ./scripts/ci/sign-macos-ci.sh cmd/gocsv/build/bin/GoCSV.app
    
    - name: Notarize GoCSV Desktop (macOS)
      if: matrix.os == 'macos-latest'
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        ./scripts/ci/notarize-macos-ci.sh cmd/gocsv/build/bin/GoCSV.app
    
    - name: Package macOS GoCSV Desktop for artifact upload
      if: matrix.os == 'macos-latest'
      run: |
        cd cmd/gocsv/build/bin
        # Use tar to preserve symlinks and attributes
        tar -czf GoCSV.app.tar.gz GoCSV.app
        cd -
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocsv-${{ matrix.os }}
        path: |
          cmd/gocsv/build/bin/GoCSV.app.tar.gz
          cmd/gocsv/build/bin/GoCSV.exe
          cmd/gocsv/build/bin/GoCSV
        retention-days: 1

  build-appimages:
    name: Build AppImages
    runs-on: self-hosted
    needs: [build-desktop, build-gocsv]
    if: always() && !cancelled()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download GoPCA Desktop Linux binary
      uses: actions/download-artifact@v4
      with:
        name: gopca-desktop-ubuntu-latest
        path: gopca-desktop-ubuntu-latest
    
    - name: Download GoCSV Desktop Linux binary
      uses: actions/download-artifact@v4
      with:
        name: gocsv-ubuntu-latest
        path: gocsv-ubuntu-latest
    
    - name: Build AppImages
      run: |
        echo "Building AppImages on self-hosted runner with FUSE support..."
        
        # Download appimagetool
        curl -L -o appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool
        
        # Build GoPCA AppImage if binary exists
        if [ -f "gopca-desktop-ubuntu-latest/GoPCA" ]; then
          echo "Building GoPCA AppImage..."
          # Prepare appdir structure
          mkdir -p appdir-gopca/usr/bin
          mkdir -p appdir-gopca/usr/share/icons/hicolor/256x256/apps
          
          # Copy files from repository
          cp gopca-desktop-ubuntu-latest/GoPCA appdir-gopca/usr/bin/
          chmod +x appdir-gopca/usr/bin/GoPCA
          
          # Create AppRun script
          printf '#!/bin/bash\nHERE="$(dirname "$(readlink -f "${0}")")"\nexec "${HERE}/usr/bin/GoPCA" "$@"\n' > appdir-gopca/AppRun
          chmod +x appdir-gopca/AppRun
          
          # Create desktop file
          cat > appdir-gopca/gopca.desktop << 'EOF'
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=GoPCA
          GenericName=PCA Analysis Tool
          Comment=Professional Principal Component Analysis Tool
          Exec=GoPCA %f
          Icon=gopca
          Terminal=false
          Categories=Science;Math;Education;DataVisualization;
          MimeType=text/csv;text/plain;
          StartupNotify=true
          EOF
          
          # Download icon from repository
          curl -L -o appdir-gopca/gopca.png https://raw.githubusercontent.com/${{ github.repository }}/main/cmd/gopca-desktop/build/linux/icon-256.png
          cp appdir-gopca/gopca.png appdir-gopca/usr/share/icons/hicolor/256x256/apps/
          
          # Build AppImage
          ARCH=x86_64 ./appimagetool appdir-gopca GoPCA-x86_64.AppImage
          echo "✓ GoPCA AppImage built successfully"
        else
          echo "⚠️ GoPCA binary not found, skipping AppImage build"
        fi
        
        # Build GoCSV AppImage if binary exists
        if [ -f "gocsv-ubuntu-latest/GoCSV" ]; then
          echo "Building GoCSV AppImage..."
          # Prepare appdir structure
          mkdir -p appdir-gocsv/usr/bin
          mkdir -p appdir-gocsv/usr/share/icons/hicolor/256x256/apps
          
          # Copy files from repository
          cp gocsv-ubuntu-latest/GoCSV appdir-gocsv/usr/bin/
          chmod +x appdir-gocsv/usr/bin/GoCSV
          
          # Create AppRun script
          printf '#!/bin/bash\nHERE="$(dirname "$(readlink -f "${0}")")"\nexec "${HERE}/usr/bin/GoCSV" "$@"\n' > appdir-gocsv/AppRun
          chmod +x appdir-gocsv/AppRun
          
          # Create desktop file
          cat > appdir-gocsv/gocsv.desktop << 'EOF'
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=GoCSV
          GenericName=CSV Editor
          Comment=Fast and Efficient CSV Data Editor
          Exec=GoCSV %f
          Icon=gocsv
          Terminal=false
          Categories=Office;Spreadsheet;Science;DataVisualization;
          MimeType=text/csv;text/plain;text/tab-separated-values;
          StartupNotify=true
          EOF
          
          # Download icon from repository
          curl -L -o appdir-gocsv/gocsv.png https://raw.githubusercontent.com/${{ github.repository }}/main/cmd/gocsv/build/linux/icon-256.png
          cp appdir-gocsv/gocsv.png appdir-gocsv/usr/share/icons/hicolor/256x256/apps/
          
          # Build AppImage
          ARCH=x86_64 ./appimagetool appdir-gocsv GoCSV-x86_64.AppImage
          echo "✓ GoCSV AppImage built successfully"
        else
          echo "⚠️ GoCSV binary not found, skipping AppImage build"
        fi
        
        # List created AppImages
        if ls *.AppImage 1> /dev/null 2>&1; then
          echo "=== AppImages created ==="
          ls -lh *.AppImage
        else
          echo "⚠️ No AppImages were created"
        fi
    
    - name: Upload AppImage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-appimages
        path: |
          *.AppImage
        retention-days: 1
        if-no-files-found: ignore

  sign-windows-binaries:
    name: Sign Windows Binaries
    runs-on: ubuntu-latest
    needs: [build-cli-binaries, build-desktop, build-gocsv]
    # Only run if SignPath secrets are configured
    if: |
      github.event_name == 'push' && 
      contains(github.ref, 'refs/tags/')
    
    steps:
    - name: Check SignPath Configuration
      id: check_signpath
      run: |
        if [ -n "${{ secrets.SIGNPATH_API_TOKEN }}" ] && [ -n "${{ secrets.SIGNPATH_ORG_ID }}" ]; then
          echo "configured=true" >> $GITHUB_OUTPUT
          echo "✓ SignPath secrets are configured"
          echo "Note: If signing fails with 'Trusted build system' error:"
          echo "  1. Go to SignPath.io organization settings"
          echo "  2. Add GitHub as a trusted build system"
          echo "  3. Link it to the 'gopca' project"
        else
          echo "configured=false" >> $GITHUB_OUTPUT
          echo "⚠️ SignPath not configured, Windows binaries will be unsigned"
          echo "To enable: Set SIGNPATH_API_TOKEN and SIGNPATH_ORG_ID secrets"
        fi
    
    - name: Download Windows CLI artifact
      if: steps.check_signpath.outputs.configured == 'true'
      uses: actions/download-artifact@v4
      with:
        name: pca-windows-amd64
        path: windows-cli
    
    - name: Download Windows GoPCA artifact
      if: steps.check_signpath.outputs.configured == 'true'
      uses: actions/download-artifact@v4
      with:
        name: gopca-desktop-windows-latest
        path: windows-desktop
    
    - name: Download Windows GoCSV artifact
      if: steps.check_signpath.outputs.configured == 'true'
      uses: actions/download-artifact@v4
      with:
        name: gocsv-windows-latest
        path: windows-gocsv
    
    # Sign pca CLI binary
    - name: Upload pca CLI for signing
      if: steps.check_signpath.outputs.configured == 'true'
      id: upload-cli
      uses: actions/upload-artifact@v4
      with:
        name: unsigned-cli
        path: windows-cli/pca-windows-amd64.exe
    
    - name: Sign pca CLI binary
      if: steps.check_signpath.outputs.configured == 'true'
      id: sign-cli
      uses: SignPath/github-action-submit-signing-request@v1
      with:
        api-token: ${{ secrets.SIGNPATH_API_TOKEN }}
        organization-id: ${{ secrets.SIGNPATH_ORG_ID }}
        project-slug: gopca
        signing-policy-slug: test-signing
        github-artifact-id: ${{ steps.upload-cli.outputs.artifact-id }}
        wait-for-completion: true
        output-artifact-directory: signed-cli
    
    # Sign GoPCA Desktop
    - name: Upload GoPCA Desktop for signing
      if: steps.check_signpath.outputs.configured == 'true'
      id: upload-desktop
      uses: actions/upload-artifact@v4
      with:
        name: unsigned-desktop
        path: windows-desktop/GoPCA.exe
    
    - name: Sign GoPCA Desktop
      if: steps.check_signpath.outputs.configured == 'true'
      id: sign-desktop
      uses: SignPath/github-action-submit-signing-request@v1
      with:
        api-token: ${{ secrets.SIGNPATH_API_TOKEN }}
        organization-id: ${{ secrets.SIGNPATH_ORG_ID }}
        project-slug: gopca
        signing-policy-slug: test-signing
        github-artifact-id: ${{ steps.upload-desktop.outputs.artifact-id }}
        wait-for-completion: true
        output-artifact-directory: signed-desktop
    
    # Sign GoCSV Desktop
    - name: Upload GoCSV Desktop for signing
      if: steps.check_signpath.outputs.configured == 'true'
      id: upload-gocsv
      uses: actions/upload-artifact@v4
      with:
        name: unsigned-gocsv
        path: windows-gocsv/GoCSV.exe
    
    - name: Sign GoCSV Desktop
      if: steps.check_signpath.outputs.configured == 'true'
      id: sign-gocsv
      uses: SignPath/github-action-submit-signing-request@v1
      with:
        api-token: ${{ secrets.SIGNPATH_API_TOKEN }}
        organization-id: ${{ secrets.SIGNPATH_ORG_ID }}
        project-slug: gopca
        signing-policy-slug: test-signing
        github-artifact-id: ${{ steps.upload-gocsv.outputs.artifact-id }}
        wait-for-completion: true
        output-artifact-directory: signed-gocsv
    
    # Upload signed artifacts
    - name: Upload signed Windows artifacts
      if: steps.check_signpath.outputs.configured == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: windows-signed
        path: |
          signed-cli/pca-windows-amd64.exe
          signed-desktop/GoPCA.exe
          signed-gocsv/GoCSV.exe
        retention-days: 1
    
    - name: Create signing status artifact
      if: always()
      run: |
        if [ "${{ steps.check_signpath.outputs.configured }}" = "true" ] && \
           [ "${{ steps.sign-cli.outcome }}" = "success" ] && \
           [ "${{ steps.sign-desktop.outcome }}" = "success" ] && \
           [ "${{ steps.sign-gocsv.outcome }}" = "success" ]; then
          echo "signed" > signing-status.txt
        else
          echo "unsigned" > signing-status.txt
        fi
    
    - name: Upload signing status
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: signing-status
        path: signing-status.txt
        retention-days: 1

  build-windows-installer:
    name: Build Windows Installer
    runs-on: self-hosted
    needs: [sign-windows-binaries]
    if: always() && !cancelled()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.test_version }}"
          echo "Using test version: $VERSION"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "Using tag version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Check signing status
      id: check_signed
      run: |
        # Check if we have signed binaries available
        echo "Checking for signed Windows binaries..."
        SIGNED="false"
        
        # The signing-status artifact tells us if signing succeeded
        if [ -f "signing-status.txt" ]; then
          STATUS=$(cat signing-status.txt)
          if [ "$STATUS" = "signed" ]; then
            SIGNED="true"
            echo "✓ Using signed Windows binaries"
          else
            echo "⚠️ Using unsigned Windows binaries"
          fi
        else
          echo "⚠️ No signing status found, using unsigned binaries"
        fi
        
        echo "use_signed=${SIGNED}" >> $GITHUB_OUTPUT
    
    - name: Download signing status
      uses: actions/download-artifact@v4
      with:
        name: signing-status
        path: .
      continue-on-error: true
    
    - name: Download Windows CLI artifact
      uses: actions/download-artifact@v4
      with:
        name: pca-windows-amd64
        path: windows-cli
    
    - name: Download signed Windows artifacts
      if: steps.check_signed.outputs.use_signed == 'true'
      uses: actions/download-artifact@v4
      with:
        name: windows-signed
        path: windows-signed
      continue-on-error: true
    
    - name: Download Windows GoPCA artifact
      uses: actions/download-artifact@v4
      with:
        name: gopca-desktop-windows-latest
        path: windows-desktop
    
    - name: Download Windows GoCSV artifact
      uses: actions/download-artifact@v4
      with:
        name: gocsv-windows-latest
        path: windows-gocsv
    
    - name: Prepare binaries for installer
      run: |
        # Create directory for installer binaries
        mkdir -p build/windows-installer
        
        # Copy pca CLI binary (prefer signed)
        if [ "${{ steps.check_signed.outputs.use_signed }}" = "true" ] && [ -f "windows-signed/pca-windows-amd64.exe" ]; then
          echo "Using signed pca CLI binary"
          cp windows-signed/pca-windows-amd64.exe build/windows-installer/pca-windows-amd64.exe
        else
          echo "Using unsigned pca CLI binary"
          cp windows-cli/pca-windows-amd64.exe build/windows-installer/pca-windows-amd64.exe
        fi
        
        # Copy GoPCA Desktop (prefer signed, handle both naming conventions)
        if [ "${{ steps.check_signed.outputs.use_signed }}" = "true" ] && [ -f "windows-signed/GoPCA.exe" ]; then
          echo "Using signed GoPCA binary"
          cp windows-signed/GoPCA.exe build/windows-installer/GoPCA.exe
        elif [ -f "windows-desktop/GoPCA-amd64.exe" ]; then
          echo "Using unsigned GoPCA binary (cross-compiled)"
          cp windows-desktop/GoPCA-amd64.exe build/windows-installer/GoPCA.exe
        elif [ -f "windows-desktop/GoPCA.exe" ]; then
          echo "Using unsigned GoPCA binary"
          cp windows-desktop/GoPCA.exe build/windows-installer/GoPCA.exe
        else
          echo "ERROR: No GoPCA.exe found!"
          ls -la windows-desktop/
          exit 1
        fi
        
        # Copy GoCSV Desktop (prefer signed, handle both naming conventions)
        if [ "${{ steps.check_signed.outputs.use_signed }}" = "true" ] && [ -f "windows-signed/GoCSV.exe" ]; then
          echo "Using signed GoCSV binary"
          cp windows-signed/GoCSV.exe build/windows-installer/GoCSV.exe
        elif [ -f "windows-gocsv/GoCSV-amd64.exe" ]; then
          echo "Using unsigned GoCSV binary (cross-compiled)"
          cp windows-gocsv/GoCSV-amd64.exe build/windows-installer/GoCSV.exe
        elif [ -f "windows-gocsv/GoCSV.exe" ]; then
          echo "Using unsigned GoCSV binary"
          cp windows-gocsv/GoCSV.exe build/windows-installer/GoCSV.exe
        else
          echo "ERROR: No GoCSV.exe found!"
          ls -la windows-gocsv/
          exit 1
        fi
        
        echo "=== Installer binaries prepared ==="
        ls -lh build/windows-installer/
    
    - name: Build Windows installer
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        echo "Building Windows installer for version ${VERSION}..."
        
        # Strip the 'v' prefix for NSIS (installer.nsi adds it back)
        VERSION_NO_V="${VERSION#v}"
        echo "Version for NSIS: ${VERSION_NO_V}"
        
        # Build the installer using NSIS
        cd scripts/windows
        makensis -V2 -DVERSION=${VERSION_NO_V} installer.nsi
        
        # Check if installer was created
        INSTALLER_PATH="../../build/windows-installer/GoPCA-Setup-${VERSION}.exe"
        if [ -f "${INSTALLER_PATH}" ]; then
          echo "✓ Installer created successfully: ${INSTALLER_PATH}"
          ls -lh "${INSTALLER_PATH}"
        else
          echo "ERROR: Installer was not created!"
          exit 1
        fi
    
    - name: Upload installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: build/windows-installer/GoPCA-Setup-*.exe
        retention-days: 1

  create-release:
    name: Create Release with Artifacts
    runs-on: ubuntu-latest
    needs: [build-cli-binaries, build-desktop, build-gocsv, build-appimages, sign-windows-binaries, build-windows-installer]
    if: always() && !cancelled()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Extract and restore macOS apps
      run: |
        # Extract macOS apps from tarballs (preserves symlinks and attributes)
        if [ -f "artifacts/gopca-desktop-macos-latest/GoPCA.app.tar.gz" ]; then
          echo "Extracting GoPCA.app from tarball..."
          cd artifacts/gopca-desktop-macos-latest
          tar -xzf GoPCA.app.tar.gz
          rm GoPCA.app.tar.gz
          cd ../..
          echo "✓ Extracted GoPCA.app with preserved symlinks"
        fi
        
        if [ -f "artifacts/gocsv-macos-latest/GoCSV.app.tar.gz" ]; then
          echo "Extracting GoCSV.app from tarball..."
          cd artifacts/gocsv-macos-latest
          tar -xzf GoCSV.app.tar.gz
          rm GoCSV.app.tar.gz
          cd ../..
          echo "✓ Extracted GoCSV.app with preserved symlinks"
        fi
        
        # Restore permissions for CLI binaries
        if [ -f "artifacts/pca-darwin-amd64/pca-darwin-amd64" ]; then
          chmod +x "artifacts/pca-darwin-amd64/pca-darwin-amd64"
        fi
        
        if [ -f "artifacts/pca-darwin-arm64/pca-darwin-arm64" ]; then
          chmod +x "artifacts/pca-darwin-arm64/pca-darwin-arm64"
        fi
    
    - name: Check signing status
      id: check_signed
      run: |
        if [ -f "artifacts/signing-status/signing-status.txt" ]; then
          STATUS=$(cat artifacts/signing-status/signing-status.txt)
          echo "windows_signed=${STATUS}" >> $GITHUB_OUTPUT
          echo "Windows binaries are: ${STATUS}"
        else
          echo "windows_signed=unsigned" >> $GITHUB_OUTPUT
          echo "Windows binaries are: unsigned (SignPath not configured)"
        fi
    
    - name: Organize and package artifacts
      run: |
        cd artifacts
        
        # Check for Windows installer
        INSTALLER_AVAILABLE="false"
        if [ -d "windows-installer" ] && ls windows-installer/GoPCA-Setup-*.exe 1> /dev/null 2>&1; then
          INSTALLER_AVAILABLE="true"
          echo "✓ Windows installer found"
          ls -lh windows-installer/GoPCA-Setup-*.exe
        else
          echo "⚠️ Windows installer not found (NSIS not available on runner)"
        fi
        echo "INSTALLER_AVAILABLE=${INSTALLER_AVAILABLE}" >> $GITHUB_ENV
        
        # Create directories for platform bundles
        mkdir -p macos windows linux
        
        # === macOS Bundle (Intel and ARM) ===
        echo "Creating macOS bundle..."
        
        # CLI binaries - both architectures
        if [ -f "pca-darwin-amd64/pca-darwin-amd64" ]; then
          cp "pca-darwin-amd64/pca-darwin-amd64" "macos/pca-intel"
        fi
        if [ -f "pca-darwin-arm64/pca-darwin-arm64" ]; then
          cp "pca-darwin-arm64/pca-darwin-arm64" "macos/pca-arm64"
        fi
        
        # GoPCA Desktop (use cp -a to preserve permissions and symlinks)
        if [ -d "gopca-desktop-macos-latest/GoPCA.app" ]; then
          cp -a "gopca-desktop-macos-latest/GoPCA.app" "macos/"
        fi
        
        # GoCSV Desktop (use cp -a to preserve permissions and symlinks)
        if [ -d "gocsv-macos-latest/GoCSV.app" ]; then
          cp -a "gocsv-macos-latest/GoCSV.app" "macos/"
        fi
        
        # Create macOS bundle zip (preserve symlinks with -y flag)
        cd macos
        zip -r -y ../gopca-macos-universal.zip .
        cd ..
        
        # === Windows Bundle ===
        echo "Creating Windows bundle..."
        
        # CLI binary (prefer signed)
        if [ "${{ steps.check_signed.outputs.windows_signed }}" = "signed" ] && [ -f "windows-signed/pca-windows-amd64.exe" ]; then
          echo "Using signed Windows CLI binary"
          cp "windows-signed/pca-windows-amd64.exe" "windows/pca.exe"
        elif [ -f "pca-windows-amd64/pca-windows-amd64.exe" ]; then
          echo "Using unsigned Windows CLI binary"
          cp "pca-windows-amd64/pca-windows-amd64.exe" "windows/pca.exe"
        fi
        
        # GoPCA app (prefer signed)
        if [ "${{ steps.check_signed.outputs.windows_signed }}" = "signed" ] && [ -f "windows-signed/GoPCA.exe" ]; then
          echo "Using signed Windows GoPCA binary"
          cp "windows-signed/GoPCA.exe" "windows/GoPCA.exe"
        elif [ -f "gopca-desktop-windows-latest/GoPCA.exe" ]; then
          echo "Using unsigned Windows GoPCA binary"
          cp "gopca-desktop-windows-latest/GoPCA.exe" "windows/GoPCA.exe"
        fi
        
        # GoCSV app (prefer signed)
        if [ "${{ steps.check_signed.outputs.windows_signed }}" = "signed" ] && [ -f "windows-signed/GoCSV.exe" ]; then
          echo "Using signed Windows GoCSV binary"
          cp "windows-signed/GoCSV.exe" "windows/GoCSV.exe"
        elif [ -f "gocsv-windows-latest/GoCSV.exe" ]; then
          echo "Using unsigned Windows GoCSV binary"
          cp "gocsv-windows-latest/GoCSV.exe" "windows/GoCSV.exe"
        fi
        
        # Create Windows bundle zip
        cd windows
        zip -r ../gopca-windows-x64.zip .
        cd ..
        
        # === Linux Bundle (x64 and ARM64) ===
        echo "Creating Linux bundle..."
        
        # CLI binaries - both architectures
        if [ -f "pca-linux-amd64/pca-linux-amd64" ]; then
          cp "pca-linux-amd64/pca-linux-amd64" "linux/pca-x64"
        fi
        if [ -f "pca-linux-arm64/pca-linux-arm64" ]; then
          cp "pca-linux-arm64/pca-linux-arm64" "linux/pca-arm64"
        fi
        
        # GoPCA app
        if [ -f "gopca-desktop-ubuntu-latest/GoPCA" ]; then
          cp "gopca-desktop-ubuntu-latest/GoPCA" "linux/GoPCA"
        fi
        
        # GoCSV app
        if [ -f "gocsv-ubuntu-latest/GoCSV" ]; then
          cp "gocsv-ubuntu-latest/GoCSV" "linux/GoCSV"
        fi
        
        # Create Linux bundle tar.gz
        cd linux
        tar -czf ../gopca-linux-x64.tar.gz .
        cd ..
        
        # Download AppImages from build-appimages job if available
        if [ -d "linux-appimages" ]; then
          echo "AppImages found from build-appimages job"
          if ls linux-appimages/*.AppImage 1> /dev/null 2>&1; then
            cp linux-appimages/*.AppImage .
            echo "✓ AppImages copied from build artifacts"
            ls -lh *.AppImage
          else
            echo "⚠️ No AppImages found in artifacts"
          fi
        else
          echo "⚠️ No AppImages artifacts found (build may have been skipped or failed)"
        fi
        
        # Move Windows installer to artifacts root if available
        if [ "${INSTALLER_AVAILABLE}" = "true" ]; then
          mv windows-installer/GoPCA-Setup-*.exe .
        fi
        
        # Clean up temporary directories
        rm -rf macos windows linux
        rm -rf pca-* gopca-desktop-* gocsv-* windows-signed signing-status unsigned-* windows-installer
        
        # Generate checksums for all artifacts (including AppImages if built)
        if [ "${INSTALLER_AVAILABLE}" = "true" ]; then
          shasum -a 256 gopca-*.zip gopca-*.tar.gz *.AppImage GoPCA-Setup-*.exe 2>/dev/null > checksums.txt || \
          shasum -a 256 gopca-*.zip gopca-*.tar.gz GoPCA-Setup-*.exe > checksums.txt
        else
          shasum -a 256 gopca-*.zip gopca-*.tar.gz *.AppImage 2>/dev/null > checksums.txt || \
          shasum -a 256 gopca-*.zip gopca-*.tar.gz > checksums.txt
        fi
        
        # List final artifacts
        echo "=== Final release artifacts ==="
        ls -lh gopca-*.zip gopca-*.tar.gz *.AppImage GoPCA-Setup-*.exe checksums.txt 2>/dev/null || \
        ls -lh gopca-*.zip gopca-*.tar.gz checksums.txt 2>/dev/null
        echo "==============================="
    
    - name: Upload test artifacts for workflow_dispatch
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: release-bundles
        path: |
          artifacts/gopca-macos-universal.zip
          artifacts/gopca-windows-x64.zip
          artifacts/gopca-linux-x64.tar.gz
          artifacts/*.AppImage
          artifacts/checksums.txt
        retention-days: 7
    
    - name: Test Mode Notification
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "=========================================="
        echo "🧪 TEST MODE - No release will be created"
        echo "=========================================="
        echo "This workflow run was triggered manually for testing."
        echo "Version used: ${{ github.event.inputs.test_version }}"
        echo ""
        echo "Artifacts have been built and can be downloaded from:"
        echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "Download the 'release-bundles' artifact to test the macOS bundle."
        echo "The gopca-macos-universal.zip contains both apps with preserved symlinks."
        echo ""
        echo "To create an actual release, push a version tag (e.g., v0.9.5)"
        echo "=========================================="
    
    - name: Create Release
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/gopca-macos-universal.zip
          artifacts/gopca-windows-x64.zip
          artifacts/gopca-linux-x64.tar.gz
          artifacts/*.AppImage
          artifacts/GoPCA-Setup-*.exe
          artifacts/checksums.txt
        generate_release_notes: true
        fail_on_unmatched_files: false
        body: |
          ## Downloads
          
          Download the complete bundle for your platform. Each bundle contains:
          - **PCA CLI**: Command-line tool for scripting and automation
          - **GoPCA Desktop**: GUI application for interactive PCA analysis
          - **GoCSV**: Data preparation and CSV editing tool
          
          ### Platform Bundles
          
          | Platform | Download | Contents |
          |----------|----------|----------|
          | **macOS** | [`gopca-macos-universal.zip`](../../releases/download/${{ github.ref_name }}/gopca-macos-universal.zip) | • `pca-intel` and `pca-arm64` CLI tools<br>• `GoPCA.app` (signed & notarized)<br>• `GoCSV.app` (signed & notarized) |
          | **Windows** | [`gopca-windows-x64.zip`](../../releases/download/${{ github.ref_name }}/gopca-windows-x64.zip) | • `pca.exe` CLI tool${{ steps.check_signed.outputs.windows_signed == 'signed' && ' (digitally signed)' || '' }}<br>• `GoPCA.exe`${{ steps.check_signed.outputs.windows_signed == 'signed' && ' (digitally signed)' || '' }}<br>• `GoCSV.exe`${{ steps.check_signed.outputs.windows_signed == 'signed' && ' (digitally signed)' || '' }} |
          | **Linux** | [`gopca-linux-x64.tar.gz`](../../releases/download/${{ github.ref_name }}/gopca-linux-x64.tar.gz) | • `pca-x64` and `pca-arm64` CLI tools<br>• `GoPCA` app<br>• `GoCSV` editor |
          
          ### Linux AppImages (Recommended for Linux desktop users)
          
          AppImages are portable, single-file applications that work on all Linux distributions. They include proper icon support and require no installation.
          
          | Application | Download | Description |
          |------------|----------|-------------|
          | **GoPCA Desktop** | [`GoPCA-x86_64.AppImage`](../../releases/download/${{ github.ref_name }}/GoPCA-x86_64.AppImage) | PCA analysis GUI with full icon support<br>• Download and make executable: `chmod +x`<br>• Double-click to run |
          | **GoCSV Editor** | [`GoCSV-x86_64.AppImage`](../../releases/download/${{ github.ref_name }}/GoCSV-x86_64.AppImage) | CSV data preparation tool with full icon support<br>• Download and make executable: `chmod +x`<br>• Double-click to run |
          
          ### Windows Installer (Recommended for Windows users)
          
          | Installer | Download | Description |
          |-----------|----------|-------------|
          | **Windows Setup** | [`GoPCA-Setup-${{ github.ref_name }}.exe`](../../releases/download/${{ github.ref_name }}/GoPCA-Setup-${{ github.ref_name }}.exe) | Complete installer with all GoPCA components${{ steps.check_signed.outputs.windows_signed == 'signed' && ' (digitally signed)' || '' }}<br>• Automated installation to Program Files<br>• Start Menu shortcuts<br>• Optional PATH configuration for CLI<br>• Uninstaller included |
          
          ### Installation
          
          1. Download the bundle for your platform
          2. Extract the archive to your preferred location
          3. Add the directory to your PATH for CLI access (optional)
          4. On macOS: Right-click and select "Open" on first launch to bypass Gatekeeper
          
          ### Verification
          
          SHA-256 checksums: [`checksums.txt`](../../releases/download/${{ github.ref_name }}/checksums.txt)
          
          ${{ steps.check_signed.outputs.windows_signed == 'signed' && '✅ **Windows binaries are digitally signed** - No security warnings on Windows 10/11' || '⚠️ **Windows binaries are not digitally signed** - You may see security warnings when running' }}
          
          ---