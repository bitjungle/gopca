name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.24'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: GoPCA ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          ## GoPCA ${{ steps.get_version.outputs.version }}
          
          ### Downloads
          
          #### CLI Binaries
          - **macOS Intel**: `gopca-cli-darwin-amd64`
          - **macOS Apple Silicon**: `gopca-cli-darwin-arm64`
          - **Linux x64**: `gopca-cli-linux-amd64`
          - **Linux ARM64**: `gopca-cli-linux-arm64`
          - **Windows x64**: `gopca-cli-windows-amd64.exe`
          
          #### Desktop Applications
          - **macOS**: `GoPCA-Desktop.app.zip`
          - **Windows**: `GoPCA-Desktop-Setup.exe`
          - **Linux**: `gopca-desktop-linux.AppImage`
          
          ### Installation
          
          #### CLI
          1. Download the appropriate binary for your platform
          2. Make it executable (Unix): `chmod +x gopca-cli-*`
          3. Move to your PATH or run directly
          
          #### Desktop
          - **macOS**: Extract and drag to Applications
          - **Windows**: Run the installer
          - **Linux**: Make AppImage executable and run
          
          ### What's Changed
          See the full changelog below for details.

  build-cli-binaries:
    name: Build CLI - ${{ matrix.goos }}-${{ matrix.goarch }}
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ needs.create-release.outputs.version }}
      run: |
        BINARY_NAME="gopca-cli-${GOOS}-${GOARCH}"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        # Build with version information
        mkdir -p build
        go build -ldflags="-s -w \
          -X github.com/bitjungle/gopca/internal/version.Version=${VERSION} \
          -X github.com/bitjungle/gopca/internal/version.GitCommit=$(git rev-parse --short HEAD) \
          -X github.com/bitjungle/gopca/internal/version.BuildDate=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")" \
          -o "build/${BINARY_NAME}" \
          cmd/gopca-cli/main.go
        
        # Create archive
        cd build
        if [ "$GOOS" = "windows" ]; then
          zip "${BINARY_NAME%.exe}.zip" "$BINARY_NAME"
          ARCHIVE_NAME="${BINARY_NAME%.exe}.zip"
        else
          tar -czf "${BINARY_NAME}.tar.gz" "$BINARY_NAME"
          ARCHIVE_NAME="${BINARY_NAME}.tar.gz"
        fi
        echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
        echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/${{ env.ARCHIVE_NAME }}
        asset_name: ${{ env.ARCHIVE_NAME }}
        asset_content_type: ${{ matrix.goos == 'windows' && 'application/zip' || 'application/gzip' }}

  build-desktop:
    name: Build Desktop - ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: gopca-desktop-linux.AppImage
            asset_content_type: application/x-executable
          - os: macos-latest
            platform: darwin
            artifact_name: GoPCA-Desktop.app.zip
            asset_content_type: application/zip
          - os: windows-latest
            platform: windows
            artifact_name: GoPCA-Desktop-Setup.exe
            asset_content_type: application/x-msdownload
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: cmd/gopca-desktop/frontend/package-lock.json
    
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev
    
    - name: Install frontend dependencies
      working-directory: cmd/gopca-desktop/frontend
      run: npm ci
    
    - name: Build desktop app
      working-directory: cmd/gopca-desktop
      env:
        VERSION: ${{ needs.create-release.outputs.version }}
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        wails build -platform ${{ matrix.platform }} -ldflags "-s -w \
          -X github.com/bitjungle/gopca/internal/version.Version=${VERSION} \
          -X github.com/bitjungle/gopca/internal/version.GitCommit=$(git rev-parse --short HEAD) \
          -X github.com/bitjungle/gopca/internal/version.BuildDate=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")"
    
    - name: Prepare macOS artifact
      if: matrix.os == 'macos-latest'
      run: |
        cd cmd/gopca-desktop/build/bin
        zip -r GoPCA-Desktop.app.zip gopca-desktop.app
        mv GoPCA-Desktop.app.zip ../../../build/
    
    - name: Prepare Windows artifact
      if: matrix.os == 'windows-latest'
      run: |
        # Assuming Wails creates an installer, adjust path as needed
        Move-Item cmd/gopca-desktop/build/bin/gopca-desktop.exe build/GoPCA-Desktop-Setup.exe
    
    - name: Prepare Linux artifact
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Create AppImage or use the binary directly
        mv cmd/gopca-desktop/build/bin/gopca-desktop build/gopca-desktop-linux.AppImage
        chmod +x build/gopca-desktop-linux.AppImage
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.artifact_name }}
        asset_content_type: ${{ matrix.asset_content_type }}

  build-gocsv:
    name: Build GoCSV - ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: gocsv-linux.AppImage
            asset_content_type: application/x-executable
          - os: macos-latest
            platform: darwin
            artifact_name: GoCSV.app.zip
            asset_content_type: application/zip
          - os: windows-latest
            platform: windows
            artifact_name: GoCSV-Setup.exe
            asset_content_type: application/x-msdownload
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: cmd/gocsv/frontend/package-lock.json
    
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev
    
    - name: Install frontend dependencies
      working-directory: cmd/gocsv/frontend
      run: npm ci
    
    - name: Build GoCSV app
      working-directory: cmd/gocsv
      env:
        VERSION: ${{ needs.create-release.outputs.version }}
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        wails build -platform ${{ matrix.platform }} -ldflags "-s -w \
          -X github.com/bitjungle/gopca/internal/version.Version=${VERSION} \
          -X github.com/bitjungle/gopca/internal/version.GitCommit=$(git rev-parse --short HEAD) \
          -X github.com/bitjungle/gopca/internal/version.BuildDate=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")"
    
    - name: Prepare macOS artifact
      if: matrix.os == 'macos-latest'
      run: |
        cd cmd/gocsv/build/bin
        zip -r GoCSV.app.zip gocsv.app
        mv GoCSV.app.zip ../../../build/
    
    - name: Prepare Windows artifact
      if: matrix.os == 'windows-latest'
      run: |
        # Assuming Wails creates an installer, adjust path as needed
        Move-Item cmd/gocsv/build/bin/gocsv.exe build/GoCSV-Setup.exe
    
    - name: Prepare Linux artifact
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Create AppImage or use the binary directly
        mv cmd/gocsv/build/bin/gocsv build/gocsv-linux.AppImage
        chmod +x build/gocsv-linux.AppImage
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.artifact_name }}
        asset_content_type: ${{ matrix.asset_content_type }}

  generate-checksums:
    name: Generate Checksums
    needs: [create-release, build-cli-binaries, build-desktop, build-gocsv]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download Release Assets
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: context.ref.replace('refs/tags/', '')
          });
          
          for (const asset of release.data.assets) {
            const response = await github.request(asset.browser_download_url);
            fs.writeFileSync(asset.name, Buffer.from(response.data));
          }
    
    - name: Generate checksums
      run: |
        sha256sum * > checksums.txt
        cat checksums.txt
    
    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain